name: Tag
on:
  push:
    tags:
      - '*'

jobs:
  build:
    name: Build and deploy release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        brand: ["payex", "swedbankpay"]
    steps:
      - uses: actions/checkout@v2

      - name: Fetch all history for all tags and branches
        run: git fetch --prune --unshallow

      # Set brand specific variables
      - name: Environment variables
        id: variables
        run: |
          chmod +x ./.github/scripts/variables.sh
          ./.github/scripts/variables.sh
        env:
          BRAND: ${{ matrix.brand }}

      # Add sentry token
      - name: Sentry token
        run: |
          chmod +x ./.github/scripts/sentry.sh
          ./.github/scripts/sentry.sh
        env:
          TOKEN: ${{ secrets.SENTRY_TOKEN }}

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.6.1
        with:
          versionSpec: '5.1.x'

      - name: Use GitVersion
        id: gitversion # step id used as reference for output values
        uses: gittools/actions/gitversion/execute@v0.6.1

      - name: Set Node.js 12.x
        uses: actions/setup-node@master
        with:
          node-version: 12.x

      - name: Cache dependencies
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install
        run: npm ci

      - name: Build
        run: npm run ${{ steps.variables.outputs.BUILD_SCRIPT }} -- --env.release=true --env.baseUrl="${{ steps.variables.outputs.BRAND_URL }}" --env.basename="v/${{ steps.gitversion.outputs.majorMinorPatch }}" --env.semver=${{ steps.gitversion.outputs.semVer }} --env.info_version=${{ steps.gitversion.outputs.informationalVersion }} --env.github_actions=true

      - name: Zip Release
        id: zip
        env:
          BRAND: ${{ steps.variables.outputs.BRAND_NAME }}
        run: | 
          ZIPFILE=${BRAND}-DesignGuide.zip
          echo "Zipping ${ZIPFILE}"
          zip -r ${ZIPFILE} dist
          echo ::set-output name=zipfile::${ZIPFILE}

      - name: Upload zipfile artifact
        uses: actions/upload-artifact@v1
        with:
          name: ${{ steps.zip.outputs.zipfile }}
          path: ${{ steps.zip.outputs.zipfile }}
        
      - name: Upload changelog artifact
        uses: actions/upload-artifact@v1
        with:
          name: changelog
          path: CHANGELOG.md

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Azure Deploy
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az storage blob upload-batch -s dist -d \$web --account-name ${{ steps.variables.outputs.AZURE_ACCOUNT }}

  release:
    name: Create release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v1
        with:
          name: PayEx-DesignGuide.zip
          name: SwedbankPay-DesignGuide.zip
          name: changelog

      - name: Read CHANGELOG
        id: changelog
        run: |
          echo "::set-output name=body::$(cat CHANGELOG.md)"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: DesignGuide v${{ steps.gitversion.outputs.majorMinorPatch }}
          body: ${{ steps.changelog.outputs.body }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./PayEx-DesignGuide.zip
          asset_name: PayEx-DesignGuide.zip
          asset_content_type: application/zip